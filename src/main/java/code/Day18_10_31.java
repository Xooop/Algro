package code;

import com.sun.xml.internal.ws.util.StringUtils;
import entity.myList;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import java.util.stream.Collectors;

/**
 * @author: gsj
 * @version: 1.0
 * @date: created on 2018/10/31
 */
public class Day18_10_31 {
    public static void main(String[] args) throws IOException {
//        System.out.println(q714_solution(new int[]{}, 655));
//        private static LinkedHashSet<Task> collectToLinkedHaskSet(List<Task> tasks) {
//            return tasks.stream().collect(toCollection(LinkedHashSet::new));
//        }
//        List<Integer> test = new ArrayList<>();
//        test.stream().collect(Collectors.toCollection(LinkedHashSet::new));
//        System.out.println(q714_solution(new int[]{1, 3, 2, 8, 4, 9}, 2));
//        System.out.println(String.valueOf());
//        List<Integer> buy1 = new ArrayList<>();
//        List<Integer> buy2 = new myList<>();
//        List<Integer> sell1 = new ArrayList<>();
//        List<Integer> sell2 = new myList<>();
//        int[] tset = new int[]{};
//        for (int i = 967; i < 1000; i++) {
//
//            System.out.print(String.format("%5s,", i));
//        }
//        System.out.println("\b");
//        for (int i = 967; i < 1000; i++) {
//
//            System.out.print(String.format("%5s,", tset[i]));
//        }
//        System.out.println("\b");
//        q714_solution(new int[]{}, 655);
//        String a = new String("abcdefgh");
//        String[] test = a.split("", 4);

        //        List<Integer> common = new ArrayList<>(buy1);
//        common.removeAll(buy2);
//        System.out.println(common);
//        List<Integer> common1 = new ArrayList<>(sell1);
//        common1.removeAll(sell2);
//        System.out.println(common1);
    }

    // 并没有全部 AC, 就很难受...
    private static int q714_My(int[] prices, int fee, List<Integer> buys, List<Integer> sells) throws IOException {
        List<Integer> p_buy = new myList<>();
        List<Integer> p_sell = new myList<>();
        int tmpIdx = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] > prices[tmpIdx]) {
                p_buy.add(tmpIdx);
                while (i < prices.length - 1 && prices[i + 1] > prices[i]) {
                    i++;
                }
                p_sell.add(i);
                tmpIdx = i + 1;
                continue;
            }
            if (prices[i] < prices[tmpIdx]) {
                tmpIdx = i;
            }
        }
        for (int i = 0; i < p_sell.size() - 1; i++) {
            if (prices[p_sell.get(i)] - prices[p_buy.get(i + 1)] < fee) {
                p_sell.remove(i);
                p_buy.remove(i + 1);
            }
        }
        int total = 0;
        for (int i = 0; i < p_buy.size(); i++) {
            int profit = prices[p_sell.get(i)] - prices[p_buy.get(i)] - fee;
//            total += (prices[p_sell.get(i)] - prices[p_buy.get(i)] - fee);
            total += profit > 0 ? profit : 0;
        }
        buys.addAll(p_buy);
        sells.addAll(p_sell);
        return total;
    }

    // -----------------------------------------------------------------------------------------------------------------
//    private static int q714_My_2(int[] prices, int fee) {
//        List<Integer> p_buy = new ArrayList<>();
//        List<Integer> p_sell = new ArrayList<>();
//        process(prices, fee, 0, p_buy, p_sell);
//        return mergeAndCount(prices, fee, p_buy, p_sell);
//    }

//    private static void process(int[] prices, int fee, int start, List<Integer> p_buy, List<Integer> p_sell) {
//        if (start >= prices.length - 1) return;
//        int i = start;
//        while (i < prices.length - 1 && prices[i] > prices[i + 1])
//            i++;
//        int lastBuy = i++;
//        int lastSell = lastBuy;
//        while (i < prices.length && prices[i] > prices[lastSell]) {
//            lastSell = i++;
//        }
//        p_buy.add(lastBuy);
//        p_sell.add(lastSell);
//        process(prices, fee, i, p_buy, p_sell);
//    }

    private static int mergeAndCount(int[] prices, int fee, List<Integer> p_buy, List<Integer> p_sell) {
        for (int i = 0; i < p_sell.size() - 1; i++) {
            if (prices[p_sell.get(i)] - prices[p_buy.get(i + 1)] < fee) {
                p_sell.remove(i);
                p_buy.remove(i + 1);
            }
        }
        int total = 0;
        for (int i = 0; i < p_buy.size(); i++) {
            int profit = prices[p_sell.get(i)] - prices[p_buy.get(i)] - fee;
//            total += (prices[p_sell.get(i)] - prices[p_buy.get(i)] - fee);
            total += profit > 0 ? profit : 0;
        }
        return total;
    }


    // -----------------------------------------------------------------------------------------------------------------

    private static int q714_solution(int[] prices, int fee) throws IOException {
        int len = prices.length;
        int[] cash = new int[len];
        int[] hold = new int[len];
        List<Integer> shouldSell = new ArrayList<>();
        List<Integer> shouldBuy = new ArrayList<>();
        hold[0] = -prices[0];
        for (int i = 1; i < len; i++) {
            Stack<Integer> sellStack = new Stack<>();
            Stack<Integer> buyStack = new Stack<>();
//            cash[i] = Math.max(cash[i - 1], prices[i] + hold[i - 1] - fee);
            int afterSell = prices[i] + hold[i - 1] - fee;
            if (afterSell > cash[i - 1]) {
                shouldSell.add(i);
                cash[i] = afterSell;
            } else
                cash[i] = cash[i - 1];
            int afterBuy = cash[i] - prices[i];
//            hold[i] = Math.max(hold[i - 1], cash[i] - prices[i]);
            if (afterBuy > hold[i - 1]) {
                shouldBuy.add(i);
                hold[i] = afterBuy;
            } else
                hold[i] = hold[i - 1];


        }
        if (shouldSell.get(0) < shouldBuy.get(0))
            shouldBuy.add(0, 0);
//        shouldBuy.stream().forEach(s -> System.out.print(String.format("%5s,", s)));
//        System.out.println("\b");
//        shouldSell.stream().forEach(s -> System.out.print(String.format("%5s,", s)));
//        System.out.println("\b");
        List<Integer> buys = new myList<>(shouldBuy);
        List<Integer> sells = new myList<>(shouldSell);

//        // 去除list中连续的
//        for (int i = 0; i < buys.size(); i++) {
//            while (i < buys.size() - 1 && buys.get(i) + 1 == buys.get(i + 1)) {
//                buys.remove(i);
//                i--;
//                break;
//            }
//        }
//
//        //
//        int start = 0;
//        for (int i = 0; i < buys.size() - 1; i++) {
//            start = process(sells, start, buys.get(i), buys.get(i + 1));
//        }


        // 写入文件
        FileWriter fileWriter = new FileWriter(new File("./files/2.txt"));
        fileWriter.write(buys.toString());
        fileWriter.write("\n");
        fileWriter.write(sells.toString());
        fileWriter.close();

        return cash[len - 1];
    }
    // -----------------------------------------------------------------------------------------------------------------

    /**
     * 将 data 中 left < data[i] < right 保留最大的那个
     *
     * @param data  需要处理的
     * @param start 从哪开始 included
     * @return end 下次处理可以从end开始
     */
    private static int process(List<Integer> data, int start, int left, int right) {
        int lastOne = 0;
        int i;
        for (i = start; i < data.size(); i++) {
            if (data.get(i) > left && data.get(i) < right) {
                lastOne = data.get(i);
                data.remove(i);
                i--;
            } else {
                break;
            }
        }
        if (lastOne != 0) {
            data.add(i, lastOne);
        }
        return i + 1;
    }
}
